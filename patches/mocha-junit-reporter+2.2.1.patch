diff --git a/node_modules/mocha-junit-reporter/index.js b/node_modules/mocha-junit-reporter/index.js
index 060ff9d..b855480 100644
--- a/node_modules/mocha-junit-reporter/index.js
+++ b/node_modules/mocha-junit-reporter/index.js
@@ -62,16 +62,17 @@ function findReporterOptions(options) {
 
 function configureDefaults(options) {
   var config = findReporterOptions(options);
+  
   debug('options', config);
   config.mochaFile = getSetting(config.mochaFile, 'MOCHA_FILE', 'test-results.xml');
   config.attachments = getSetting(config.attachments, 'ATTACHMENTS', false);
   config.antMode = getSetting(config.antMode, 'ANT_MODE', false);
+  config.circleCIMode = getSetting(config.circleCIMode, 'CIRCLE_CI_MODE', false);
   config.jenkinsMode = getSetting(config.jenkinsMode, 'JENKINS_MODE', false);
   config.properties = getSetting(config.properties, 'PROPERTIES', null, parsePropertiesFromEnv);
   config.toConsole = !!config.toConsole;
   config.rootSuiteTitle = config.rootSuiteTitle || 'Root Suite';
   config.testsuitesTitle = config.testsuitesTitle || 'Mocha Tests';
-
   if (config.antMode) {
     updateOptionsForAntMode(config);
   }
@@ -81,7 +82,6 @@ function configureDefaults(options) {
   }
 
   config.suiteTitleSeparatedBy = config.suiteTitleSeparatedBy || ' ';
-
   return config;
 }
 
@@ -250,12 +250,13 @@ function MochaJUnitReporter(runner, options) {
   };
 
   this._runner.on('suite end', function(suite) {
+
     // allow tests to mock _onSuiteEnd
     return this._onSuiteEnd(suite);
   }.bind(this));
 
   this._runner.on('pass', function(test) {
-    lastSuite().push(this.getTestcaseData(test));
+    lastSuite().push(this.getTestcaseData(test,undefined,true));
   }.bind(this));
 
   this._runner.on('fail', function(test, err) {
@@ -320,7 +321,7 @@ MochaJUnitReporter.prototype.getTestsuiteData = function(suite) {
  * @param {object} err - if test failed, the failure object
  * @returns {object}
  */
-MochaJUnitReporter.prototype.getTestcaseData = function(test, err) {
+MochaJUnitReporter.prototype.getTestcaseData = function(test, err, showFlakes=false) {
   var jenkinsMode = this._options.jenkinsMode;
   var flipClassAndName = this._options.testCaseSwitchClassnameAndName;
   var name = stripAnsi(jenkinsMode ? getJenkinsClassname(test, this._options) : test.fullTitle());
@@ -334,6 +335,10 @@ MochaJUnitReporter.prototype.getTestcaseData = function(test, err) {
       }
     }]
   };
+  // add flakyRetries attr to the testcase _attr
+  if(showFlakes && test._currentRetry > 0){
+    testcase.testcase[0]._attr.flakyRetries = test._currentRetry;
+  }
 
   // We need to merge console.logs and attachments into one <system-out> -
   //  see JUnit schema (only accepts 1 <system-out> per test).
@@ -369,9 +374,32 @@ MochaJUnitReporter.prototype.getTestcaseData = function(test, err) {
     if (!Base.hideDiff && err.expected !== undefined) {
         var oldUseColors = Base.useColors;
         Base.useColors = false;
-        failureMessage += "\n" + Base.generateDiff(err.actual, err.expected);
+        // there's this weird bug where the boolean value true is sometimes converted to the string "true"
+        // and it generates a diff that looks weird because mocha is comparing a string to a boolean
+        
+        // assumming that we usually don't expect any string "true" to be compared to a boolean value, we can do the following
+        // check if one of the values is the string true and if the other is a boolean value, and if so convert the string to a boolean
+        
+        let problemScenario = false
+        if (err.actual === "true" && typeof err.expected === "boolean") {
+            err.actual = true;
+            problemScenario = true
+        }
+        if (err.expected === "true" && typeof err.actual === "boolean") {
+            err.expected = true;
+            problemScenario = true
+        }
+        failureMessage += "\n";
+        if(!problemScenario){
+          + Base.generateDiff(err.actual, err.expected)
+        }
+        else{
+          failureMessage += "- actual: " + err.actual + "\n"
+          failureMessage += "+ expected: " + err.expected + "\n"
+        }
         Base.useColors = oldUseColors;
     }
+    
     var failureElement = {
       _attr: {
         message: this.removeInvalidCharacters(message) || '',
@@ -379,7 +407,6 @@ MochaJUnitReporter.prototype.getTestcaseData = function(test, err) {
       },
       _cdata: this.removeInvalidCharacters(failureMessage)
     };
-
     testcase.testcase.push({failure: failureElement});
   }
   return testcase;
@@ -450,8 +477,10 @@ MochaJUnitReporter.prototype.getXml = function(testsuites) {
   var totalTests = 0;
   var stats = this._runner.stats;
   var antMode = this._options.antMode;
+  var circleCIMode = this._options.circleCIMode;
   var hasProperties = (!!this._options.properties) || antMode;
   var Date = this._Date;
+  var suiteFileName = testsuites[0] && testsuites[0].testsuite[0] && testsuites[0].testsuite[0]._attr && testsuites[0].testsuite[0]._attr.file;
 
   testsuites.forEach(function(suite) {
     var _suiteAttr = suite.testsuite[0]._attr;
@@ -469,6 +498,10 @@ MochaJUnitReporter.prototype.getXml = function(testsuites) {
     _suiteAttr.failures = 0;
     _suiteAttr.skipped = 0;
 
+    if (circleCIMode) {
+      _suiteAttr.file = suiteFileName;
+    }
+
     _cases.forEach(function(testcase) {
       var lastNode = testcase.testcase[testcase.testcase.length - 1];
 
